generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id                   String                 @id @default(cuid())
  name                 String
  owner_id             String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  VideoMetaData        VideoMetaData[]
  workspaceMember      WorkspaceMember[]
  YoutubeLinkedAccount YoutubeLinkedAccount[]
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  workspaceId String
  userId      String
  role        WorkspaceMemberRole
  status      Status
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@index([workspaceId])
  @@index([userId])
}

model VideoMetaData {
  id       String @id @default(cuid())
  key      String // this would be the key in S3
  fileName String

  title         String
  tags          String[]
  privacyStatus String
  categoryId    String
  description   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  workspaceId   String
  uploaderId    String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
  @@index([uploaderId])
}

model YoutubeLinkedAccount {
  id           String    @id @default(cuid())
  userId       String    @unique
  workspaceId  String
  accessToken  String
  refreshToken String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  expiryDate   DateTime
  workspace    Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
}

model Subscription {
  id                     String             @id @default(cuid())
  razorpaySubscriptionId String?            @unique
  userId                 String
  planType               PlanType
  status                 SubscriptionStatus
  currentPeriodStart     DateTime
  currentPeriodEnd       DateTime
  isTrialSubscription    Boolean            @default(false)
  trialStartDate         DateTime?
  trialEndDate           DateTime?
  hasUsedTrial           Boolean            @default(false)
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  transaction            Transaction[]

  @@index([userId])
  @@index([razorpaySubscriptionId])
  @@index([userId, hasUsedTrial])
}

model Transaction {
  id                 String            @id @default(cuid())
  razorpayPaymentId  String?           @unique // Made optional for trial transactions
  subscriptionId     String // subscription table id
  userId             String // clerk user id
  amount             Int // in paise/cents (0 for trial)
  currency           String            @default("INR")
  status             TransactionStatus
  method             String?
  description        String?
  isTrialTransaction Boolean           @default(false)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  subscription       Subscription      @relation(fields: [subscriptionId], references: [id])

  @@index([subscriptionId])
  @@index([razorpayPaymentId])
}

enum Status {
  INVITED
  ACTIVE
  PENDING
  REJECTED
  DECLINED
  REMOVED
}

enum SubscriptionStatus {
  CREATED       @map("created")
  AUTHENTICATED @map("authenticated")
  ACTIVE        @map("active")
  PENDING       @map("pending")
  HALTED        @map("halted")
  CANCELLED     @map("cancelled")
  COMPLETED     @map("completed")
  EXPIRED       @map("expired")
  TRIAL_ACTIVE  @map("trial_active")
  TRIAL_EXPIRED @map("trial_expired")
}

enum PlanType {
  BASIC
  PRO
  TRIAL_BASIC
}

enum TransactionStatus {
  CREATED    @map("created")
  AUTHORIZED @map("authorized")
  CAPTURED   @map("captured")
  REFUNDED   @map("refunded")
  FAILED     @map("failed")
}

enum WorkspaceMemberRole {
  OWNER @map("owner")
  MANAGER @map("manager")
  MEMBER @map("member")
}