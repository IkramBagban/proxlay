// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  owner_id  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspaceMember      WorkspaceMember[]
  VideoMetaData        VideoMetaData[]
  YoutubeLinkedAccount YoutubeLinkedAccount[]
}

enum Status {
  INVITED
  ACTIVE
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  workspaceId String
  userId      String // referenced to clerk user id
  role        String
  status      Status
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@index([workspaceId])
  @@index([userId])
}

model VideoMetaData {
  id       String @id @default(cuid())
  key      String // this would be the key in S3
  fileName String

  title         String
  tags          String[]
  privacyStatus String
  categoryId    String
  description   String
  // thumbnail     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  workspaceId String
  uploaderId  String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
  @@index([uploaderId])
}

model YoutubeLinkedAccount {
  id           String   @id @default(cuid())
  userId       String // referenced to clerk user id
  workspaceId  String
  accessToken  String
  refreshToken String
  expiryDate   DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([userId])
  @@index([workspaceId])
}
